{"version":3,"file":"main.js","mappings":"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","sources":["webpack://apoloplay/./apps/music-service/src/app/app.controller.ts","webpack://apoloplay/./apps/music-service/src/app/app.module.ts","webpack://apoloplay/./apps/music-service/src/app/app.service.ts","webpack://apoloplay/./apps/music-service/src/app/models/artist.ts","webpack://apoloplay/./apps/music-service/src/app/models/song.ts","webpack://apoloplay/./apps/music-service/src/app/modules/artist/artist.controller.ts","webpack://apoloplay/./apps/music-service/src/app/modules/artist/artist.module.ts","webpack://apoloplay/./apps/music-service/src/app/modules/artist/artist.service.ts","webpack://apoloplay/./apps/music-service/src/app/modules/song/song.controller.ts","webpack://apoloplay/./apps/music-service/src/app/modules/song/song.module.ts","webpack://apoloplay/./apps/music-service/src/app/modules/song/song.service.ts","webpack://apoloplay/./libs/definitions/src/index.ts","webpack://apoloplay/./libs/definitions/src/lib/artist/index.ts","webpack://apoloplay/./libs/definitions/src/lib/localStorage/index.ts","webpack://apoloplay/./libs/definitions/src/lib/localStorage/types.ts","webpack://apoloplay/./libs/definitions/src/lib/song/index.ts","webpack://apoloplay/external commonjs \"@nestjs/common\"","webpack://apoloplay/external commonjs \"@nestjs/core\"","webpack://apoloplay/external commonjs \"@nestjs/mongoose\"","webpack://apoloplay/external commonjs \"mongoose\"","webpack://apoloplay/external commonjs \"tslib\"","webpack://apoloplay/webpack/bootstrap","webpack://apoloplay/./apps/music-service/src/main.ts"],"sourcesContent":["import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getData() {\n    return this.appService.index();\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { ArtistModule } from './modules/artist/artist.module';\nimport { SongModule } from './modules/song/song.module';\n\n@Module({\n  imports: [\n    MongooseModule.forRoot(\n      `mongodb+srv://${process.env.DB_USER}:${process.env.DB_PASS}@${process.env.DB_CLUSTER}.mongodb.net/${process.env.DB_NAME}?retryWrites=true&w=majority`\n    ),\n    ArtistModule,\n    SongModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n","import { Injectable } from '@nestjs/common';\nimport { stringify } from 'querystring';\n\n@Injectable()\nexport class AppService {\n  async index() {\n    return {\n      message: 'This is only an index',\n      links: { songs: '/songs', artists: '/artists' },\n    };\n  }\n}\n","import { Artist } from '@apoloplay/definitions';\nimport { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Types } from 'mongoose';\n\n@Schema()\nexport class ArtistMongo implements Artist {\n  @Prop({ type: Types.ObjectId })\n  _id: Types.ObjectId;\n\n  @Prop({ type: String, required: true })\n  image: string;\n\n  @Prop({ type: String, required: false })\n  name: string;\n\n  @Prop({ type: String, required: true })\n  alias: string;\n\n  @Prop({ type: Types.ObjectId, required: false })\n  songs: Types.ObjectId[];\n}\n\nexport type ArtistDocument = ArtistMongo & Document;\n\nexport const ArtistSchema = SchemaFactory.createForClass(ArtistMongo);\n","import { Song } from '@apoloplay/definitions';\nimport { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Types, Document } from 'mongoose';\n\n@Schema()\nexport class SongMongo implements Song {\n  @Prop({ type: Types.ObjectId })\n  _id: Types.ObjectId;\n\n  @Prop({ type: String, required: true })\n  image: string;\n\n  @Prop({ type: String, required: true })\n  name: string;\n\n  @Prop({ type: String, required: true })\n  publish_year: number;\n\n  @Prop({ type: Types.ObjectId, required: true })\n  artist: Types.ObjectId;\n\n  @Prop({ type: String, required: true })\n  url: string;\n}\n\nexport type SongDocument = SongMongo & Document;\n\nexport const SongSchema = SchemaFactory.createForClass(SongMongo);\n","import {\n  CreateArtistDAO,\n  CreateArtistDTO,\n  DeleteArtistDAO,\n  DeleteArtistDTO,\n  GetArtistsDAO,\n  UpdateArtistDAO,\n  UpdateArtistDTO,\n} from '@apoloplay/definitions';\nimport { Body, Controller, Delete, Get, Patch, Post } from '@nestjs/common';\nimport { ArtistService } from './artist.service';\n\n@Controller('artists')\nexport class ArtistController {\n  constructor(private readonly artistService: ArtistService) {}\n\n  @Get('all')\n  async getAll(): Promise<GetArtistsDAO | undefined> {\n    return await this.artistService.getAll();\n  }\n\n  @Post()\n  async create(\n    @Body() createArtistDTO: CreateArtistDTO\n  ): Promise<CreateArtistDAO | undefined> {\n    return await this.artistService.create(createArtistDTO);\n  }\n\n  @Patch()\n  async updateById(\n    @Body() updateArtistDTO: UpdateArtistDTO\n  ): Promise<UpdateArtistDAO | undefined> {\n    return await this.artistService.updateById(updateArtistDTO);\n  }\n\n  @Delete()\n  async deleteById(\n    @Body() deleteArtistDTO: DeleteArtistDTO\n  ): Promise<DeleteArtistDAO | undefined> {\n    return await this.artistService.deleteById(deleteArtistDTO);\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { ArtistSchema } from '../../models/artist';\nimport { ArtistController } from './artist.controller';\nimport { ArtistService } from './artist.service';\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: 'Artist', schema: ArtistSchema }]),\n  ],\n  controllers: [ArtistController],\n  providers: [ArtistService],\n})\nexport class ArtistModule {}\n","import {\n  CreateArtistDAO,\n  CreateArtistDTO,\n  DeleteArtistDAO,\n  DeleteArtistDTO,\n  GetArtistsDAO,\n  UpdateArtistDAO,\n  UpdateArtistDTO,\n} from '@apoloplay/definitions';\nimport {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, Types } from 'mongoose';\nimport { ArtistDocument } from '../../models/artist';\n\n@Injectable()\nexport class ArtistService {\n  constructor(\n    @InjectModel('Artist') private artistModel: Model<ArtistDocument>\n  ) {}\n\n  async getAll(): Promise<GetArtistsDAO | undefined> {\n    try {\n      return await this.artistModel.find();\n    } catch (error) {\n      return error;\n    }\n  }\n\n  async create(createArtistDTO: CreateArtistDTO): Promise<CreateArtistDAO> {\n    try {\n      const createdUser = await this.artistModel.create({\n        ...createArtistDTO,\n        _id: new Types.ObjectId(),\n      });\n      return createdUser;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  async updateById(updateArtistDTO: UpdateArtistDTO): Promise<UpdateArtistDAO> {\n    if (!updateArtistDTO._id) {\n      throw new BadRequestException({\n        errors: { message: 'Path `_id` is required.' },\n      });\n    }\n    if (\n      !(await this.artistModel.findById(\n        new Types.ObjectId(updateArtistDTO._id)\n      ))\n    ) {\n      throw new NotFoundException({\n        errors: {\n          message: `An Artist with ${'`'}_id${'`'}: ${'`'}${\n            updateArtistDTO._id\n          }${'`'} was not found`,\n        },\n      });\n    }\n\n    const { _id, ...cleanArtist } = updateArtistDTO;\n\n    return await this.artistModel.findByIdAndUpdate(\n      new Types.ObjectId(updateArtistDTO._id),\n      cleanArtist\n    );\n  }\n\n  async deleteById(\n    deleteArtistDTO: DeleteArtistDTO\n  ): Promise<DeleteArtistDAO | undefined> {\n    if (!deleteArtistDTO._id) {\n      throw new BadRequestException({\n        errors: { message: 'Path `_id` is required.' },\n      });\n    }\n    if (\n      !(await this.artistModel.findById(\n        new Types.ObjectId(deleteArtistDTO._id)\n      ))\n    ) {\n      throw new NotFoundException({\n        errors: {\n          message: `An Artist with ${'`'}_id${'`'}: ${'`'}${\n            deleteArtistDTO._id\n          }${'`'} was not found`,\n        },\n      });\n    }\n\n    return await this.artistModel.findByIdAndDelete(deleteArtistDTO._id);\n  }\n}\n","import {\n  CreateSongDAO,\n  CreateSongDTO,\n  DeleteSongDAO,\n  DeleteSongDTO,\n  GetSongsDAO,\n  UpdateSongDAO,\n  UpdateSongDTO,\n} from '@apoloplay/definitions';\nimport { Body, Controller, Delete, Get, Patch, Post } from '@nestjs/common';\nimport { SongService } from './song.service';\n\n@Controller('songs')\nexport class SongController {\n  constructor(private readonly songService: SongService) {}\n\n  @Get('all')\n  async getAll(): Promise<GetSongsDAO | undefined> {\n    return await this.songService.getAll();\n  }\n\n  @Post()\n  async create(\n    @Body() createSongDTO: CreateSongDTO\n  ): Promise<CreateSongDAO | undefined> {\n    return await this.songService.create(createSongDTO);\n  }\n\n  @Patch()\n  async updateById(\n    @Body() updateSongDTO: UpdateSongDTO\n  ): Promise<UpdateSongDAO | undefined> {\n    return await this.songService.updateById(updateSongDTO);\n  }\n\n  @Delete()\n  async deleteById(\n    @Body() deleteSongDTO: DeleteSongDTO\n  ): Promise<DeleteSongDAO | undefined> {\n    return await this.songService.deleteById(deleteSongDTO);\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { SongMongo, SongSchema } from '../../models/song';\nimport { SongController } from './song.controller';\nimport { SongService } from './song.service';\n\n@Module({\n  imports: [MongooseModule.forFeature([{ name: 'Song', schema: SongSchema }])],\n  controllers: [SongController],\n  providers: [SongService],\n})\nexport class SongModule {}\n","import {\n  CreateSongDAO,\n  CreateSongDTO,\n  DeleteSongDAO,\n  DeleteSongDTO,\n  GetSongsDAO,\n  UpdateSongDAO,\n  UpdateSongDTO,\n} from '@apoloplay/definitions';\nimport { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, Types } from 'mongoose';\nimport { SongDocument } from '../../models/song';\n\n@Injectable()\nexport class SongService {\n  constructor(@InjectModel('Song') private songModel: Model<SongDocument>) {}\n\n  async getAll(): Promise<GetSongsDAO | undefined> {\n    try {\n      return await this.songModel.find();\n    } catch (error) {}\n  }\n\n  async create(\n    createSongDTO: CreateSongDTO\n  ): Promise<CreateSongDAO | undefined> {\n    try {\n      return await this.songModel.create({\n        ...createSongDTO,\n        _id: new Types.ObjectId(),\n      });\n    } catch (error) {}\n  }\n\n  async updateById(\n    updateSongDTO: UpdateSongDTO\n  ): Promise<UpdateSongDAO | undefined> {\n    try {\n      const oldSong = await this.songModel.findById(updateSongDTO);\n\n      return await this.songModel.findByIdAndUpdate(updateSongDTO._id, {\n        ...updateSongDTO,\n      });\n    } catch (error) {}\n  }\n\n  async deleteById(\n    deleteSongDTO: DeleteSongDTO\n  ): Promise<DeleteSongDAO | undefined> {\n    try {\n      return await this.songModel.findByIdAndDelete(deleteSongDTO._id);\n    } catch (error) {}\n  }\n}\n","export * from './lib/song';\nexport * from './lib/artist';\nexport * from './lib/localStorage';\n","export * from './types';\nexport * from './daos';\nexport * from './dtos';\n","export * from './types';\n","export enum LOCAL_STORAGE_KEYS {\n  SONG = 'song',\n  SONG_ARRAY = 'song_array',\n  ARTIST = 'artist',\n  ARTIST_ARRAY = 'artist_array',\n}\n","export * from './types';\nexport * from './daos';\nexport * from './dtos';\n","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"@nestjs/mongoose\");","module.exports = require(\"mongoose\");","module.exports = require(\"tslib\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * This is not a production server yet!\n * This is only a minimal backend to get started.\n */\n\nimport { Logger } from '@nestjs/common';\nimport { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app/app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  app.setGlobalPrefix('');\n  const port = process.env.PORT || 3333;\n  await app.listen(port);\n  Logger.log(`🚀 Application is running on: http://localhost:${port}`);\n}\n\nbootstrap();\n"],"names":[],"sourceRoot":""}